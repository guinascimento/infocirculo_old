require 'digest/sha1'
  
class User < ActiveRecord::Base  

  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    #return true if @_list.include?("admin")
    return (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  
  include Authentication
  include Authentication::ByCookieToken
  include Authentication::UserAbstraction
  
  has_one :curriculum
  belongs_to :industry
  
  set_inheritance_column :user_type
  validates_presence_of  :user_type
  
  validates_presence_of :name
  
  attr_accessible :login, :email, :name, :password, :password_confirmation, :invitation_token, :last_name, :avatar, :industry_id, :cep, :professional_description
  
  has_attached_file :avatar, :styles => { :thumb => "90x90>" }
  
  def self.member_list(page)
    paginate :all, :per_page => 50, :page => page, :conditions => ['enabled = ? and activated_at IS NOT NULL', true], :order => 'login'
  end
  
  def self.administrative_member_list(page)
    paginate :all, :per_page => 50, :page => page, :order => 'login'
  end
  
  def to_xml(options = {})
    #Add attributes accessible by xml
    #Ex. default_only = [:id, :login, :name]
    default_only = []
    options[:only] = (options[:only] || []) + default_only
    super(options)
  end

end
